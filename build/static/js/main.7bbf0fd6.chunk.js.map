{"version":3,"sources":["Menu.tsx","Header/Header.tsx","CurrentUser/CurrentUserContext.js","Header/HeaderContainer.tsx","Home/Home.tsx","Page2/Page2.tsx","Countries/Country.tsx","AddCountryForm/AddCountryForm.tsx","Utils/AxiosConfig.ts","Config.ts","Countries/CountriesSlice.ts","AddCountryForm/AddCountryFormContainer.tsx","Countries/Countries.tsx","Countries/CountriesContainer.tsx","Login/LoginForm.tsx","Login/LoginFormContainer.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["Menu","to","className","Header","props","history","useHistory","location","useLocation","currentUserState","isAuthenticated","user","firstName","surname","type","onClick","clearCurrentUser","push","pathname","reducer","state","action","localStorage","setItem","JSON","stringify","payload","removeItem","Error","initialState","undefined","currentUserData","getItem","parse","setInitialState","CurrentUserStateContext","React","createContext","CurrentUserDispatchContext","CurrentUserProvider","children","useReducer","dispatch","Provider","value","useCurrentUserState","context","useContext","useCurrentUserDispatch","HeaderContainer","Home","Page2","Country","country","name","code","AddCountryForm","onFormSubmit","values","a","addCountryWrapper","console","log","useForm","handleSubmit","register","errors","onSubmit","ref","required","validate","length","countryName","message","countryCode","error","status","AxiosConfig","headers","this","token","Authorization","apiBaseUrl","url","Config","fetchCountries","createAsyncThunk","rejectWithValue","config","addAuthorizationHeader","axios","response","data","addCountry","post","countriesSlice","createSlice","list","addCountryStatus","fetchCountriesStatus","reducers","extraReducers","builder","addCase","pending","fulfilled","countries","rejected","fetchCountriesError","addCountryError","concat","sort","b","localeCompare","AddCountryFormContainer","useSelector","useDispatch","Countries","map","key","id","CountriesContainer","useEffect","err","getCountries","Fragment","handleSuccess","actions","setCurrentUser","currentUser","setSubmitting","setStatus","resetForm","referrerPage","handleFailure","msg","LoginForm","initialValues","validationSchema","loginHandler","touched","isSubmitting","username","password","disabled","login","Axios","loginSchema","yup","shape","LoginFormContainer","ProtectedRoute","isAllowed","Main","path","component","exact","App","Boolean","window","hostname","match","rootReducer","combineReducers","countriesReducer","store","configureStore","middleware","getDefaultMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7bbf0fd6.chunk.js","sourcesContent":["import React from \"react\"\nimport { NavLink } from \"react-router-dom\"\n\n//react router examples use Link - NavLink gives you mouse pointers\n\nconst Menu = () => (\n  <div>\n    <nav>\n      <ul>\n        <li>\n          <NavLink to=\"/\">Home</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Page2\">Page 2</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Countries\" className=\"menu-countries\">\n            Countries\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  </div>\n)\n\nexport default Menu\n","import React from \"react\";\nimport Menu from \"../Menu\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\";\nimport \"../style.css\"\n\n\n\ntype HeaderProps = {\n  clearCurrentUser: Function\n  currentUserState: CurrentUserState\n}\n\nconst Header = (props: HeaderProps) => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const logOut = () => {\n\n    props.clearCurrentUser();\n\n    history.push(\"/\");\n\n  }\n\n  const logIn = () => {\n\n    //when we click on /login from an unprotected page, we redirect to it once logged in\n    history.push(\"/login\", location.pathname);\n  }\n\n  return (<header className=\"App-header\">\n    <p>Demo20 - React / Redux 2 with Typescript</p>\n\n    {props.currentUserState.isAuthenticated\n      ? <div>\n        <p>{props.currentUserState.user?.firstName} {props.currentUserState.user?.surname} is logged in</p>\n        <button type=\"button\" className=\"link-button\" onClick={logOut}>Log out</button>\n      </div>\n      : <button type=\"button\" className=\"link-button\" onClick={logIn}>Log in</button>\n\n    }\n\n    <Menu />\n  </header>\n  )\n}\n\nexport default Header;\n","import React, { useReducer } from 'react'\n\n//couldn't get this to work as a .ts file\n\n//https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET\":\n      localStorage.setItem('currentUser', JSON.stringify(action.payload.user));\n      return { ...state, isAuthenticated: action.payload.isAuthenticated, user: action.payload.user };\n    case \"CLEAR\":\n      localStorage.removeItem('currentUser');\n      return { ...state, isAuthenticated: false, user: null };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`)\n  }\n};\n\n\n\nfunction setInitialState() {\n  const initialState = {\n    isAuthenticated: false,\n    user: undefined\n  };\n\n  const currentUserData = localStorage.getItem(\"currentUser\");\n\n  if (!!currentUserData) {\n    initialState.isAuthenticated = true;\n    initialState.user = JSON.parse(currentUserData);\n  }\n  return initialState;\n}\n\n\nconst initialState = setInitialState();\n\nconst CurrentUserStateContext = React.createContext(initialState);\nconst CurrentUserDispatchContext = React.createContext();\n\n\n\nconst CurrentUserProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <CurrentUserStateContext.Provider value={state}>\n      <CurrentUserDispatchContext.Provider value={dispatch}>\n        {children}\n      </CurrentUserDispatchContext.Provider>\n    </CurrentUserStateContext.Provider>\n  )\n}\n\nconst useCurrentUserState = () => {\n  const context = React.useContext(CurrentUserStateContext)\n  if (context === undefined) {\n    throw new Error('useCurrentUserState must be used within a CurrentUserProvider')\n  }\n  return context\n}\n\nconst useCurrentUserDispatch = () => {\n  const context = React.useContext(CurrentUserDispatchContext)\n  if (context === undefined) {\n    throw new Error('useCurrentUserDispatch must be used within a CurrentUserProvider')\n  }\n  return context\n}\n\nexport { CurrentUserProvider, useCurrentUserState, useCurrentUserDispatch }\n\n\n\n","import Header from \"./Header\"\nimport React from \"react\"\nimport { useCurrentUserState, useCurrentUserDispatch } from \"../CurrentUser/CurrentUserContext\"\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\n\n\nconst HeaderContainer = () => {\n\n    //STATE MANAGEMENT 1 - userContext / useReducer\n    const dispatch = useCurrentUserDispatch()\n    const currentUserState: CurrentUserState = useCurrentUserState()\n\n    const clearCurrentUser = () => {\n        dispatch({ type: \"CLEAR\" })\n    }\n\n    return (<Header\n        clearCurrentUser={clearCurrentUser}\n        currentUserState={currentUserState}\n    ></Header>)\n}\n\nexport default HeaderContainer\n\n\n","import React from \"react\";\n\nconst Home = () => <div>home</div>;\n\nexport default Home;\n","import React from \"react\";\n\nconst Page2 = () => <div>Page2</div>;\n\nexport default Page2;\n","import React from \"react\"\n//https://github.com/eslint/typescript-eslint-parser/issues/457\n// eslint-disable-next-line no-unused-vars\nimport CountryModel from \"./CountryModel\"\n\ntype CountryProps = {\n  country: CountryModel\n}\n\nconst Country = (props: CountryProps) => {\n  return <li className=\"countries-item\">{props.country.name} {props.country.code}</li>\n}\n\nexport default Country\n","import React from \"react\"\nimport { useForm } from \"react-hook-form\";\nimport AddCountryFormModel from \"../Countries/AddCountryFormModel\";\n\n\n\ntype AddCountryFormProps = {\n  addCountryWrapper: Function\n  status: string\n  error?: string\n}\n\nconst AddCountryForm = (props: AddCountryFormProps) => {\n\n  const onFormSubmit = async (values: AddCountryFormModel) => {\n\n    try {\n      await props.addCountryWrapper(values)\n      console.log(values)\n\n    }\n    catch (err) {\n      console.log(err)\n    }\n  }\n\n\n  const { handleSubmit, register, errors } = useForm();\n\n  const onSubmit = async (values: any) => await onFormSubmit(values);\n\n  //https://react-hook-form.com/\n  //https://codesandbox.io/s/8n937m64o9\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n\n      <input\n        name=\"countryName\"\n        ref={register({\n          required: \"Required\",\n          validate: value => value.length > 2 || \"Country name must be at least three characters\"\n        })}\n      />\n      {errors.countryName && errors.countryName.message}\n\n      <input\n        name=\"countryCode\"\n        ref={register({\n          required: \"Required\",\n          validate: value => value.length === 3 || \"Country code must be three characters\"\n        })}\n      />\n      {errors.countryCode && errors.countryCode.message}\n\n      <button type=\"submit\">Submit</button>\n\n      {!!props.error && <p className=\"error\">{props.error}</p>}\n\n      { <p>Status: {props.status}</p>}\n    </form>\n  );\n};\n\nexport default AddCountryForm\n","class AxiosConfig {\n\n    headers: any\n\n    constructor() {\n        this.headers = {}\n    }\n\n\n    addAuthorizationHeader(token?: string): AxiosConfig {\n\n        this.headers.Authorization = `Bearer ${token}`\n\n        return this\n\n    }\n}\n\nexport default AxiosConfig","\n//TODO: env vars?\n\n//https://github.com/dotnet/aspnetcore/issues/13048\n//ssl port 44331 - ssl local certs don't work (easily) on linux\nconst dev = {\n  apiBaseUrl: \"http://localhost:50263/api\",\n};\n\nconst prod = {\n  apiBaseUrl: \"https://prod/api\",\n};\n\nconst getSettings = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nexport default {\n  settings: getSettings(),\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from \"axios\"\nimport AxiosConfig from \"../Utils/AxiosConfig\"\nimport Config from \"../Config\"\nimport CountryModel from \"./CountryModel\"\nimport { useSelector, TypedUseSelectorHook } from 'react-redux'\n\nconst url = Config.settings.apiBaseUrl + \"/countries\"\n\n//https://redux-toolkit.js.org/api/createAsyncThunk\n//https://redux-toolkit.js.org/usage/usage-guide#asynchronous-logic-and-data-fetching\n\n// The function below is called a thunk and allows us to perform async logic.\n// It can be dispatched like a regular action: `dispatch(incrementAsync(10))`.\n// This will call the thunk with the `dispatch` function as the first argument.\n// Async code can then be executed and other actions can be dispatched\n\n//https://redux-toolkit.js.org/api/createAsyncThunk#handling-thunk-errors\nexport const fetchCountries = createAsyncThunk('countries/fetch', async (token: string, { rejectWithValue }) => {\n\n  const config = new AxiosConfig().addAuthorizationHeader(token)\n\n  try {\n    const response = await axios(url, config)\n    return response.data\n  }\n  catch (err) {\n    console.log(err.response.data)\n    return rejectWithValue(err.response.data)\n  }\n\n\n})\n\ninterface AddCountryCreateAsyncThunkProperties {\n  country: any\n  token: string\n}\n\n\n//we wrap country, token in an object - it seems we're allowed one paramter\n//(any second param would seem to be the store itself)\nexport const addCountry = createAsyncThunk('countries/add', async (props: AddCountryCreateAsyncThunkProperties, { rejectWithValue }) => {\n\n  const data = { name: props.country.countryName, code: props.country.countryCode }\n\n  const config = new AxiosConfig().addAuthorizationHeader(props.token)\n\n  try {\n    const response = await axios.post(url, data, config)\n    return response.data\n\n  }\n  catch (err) {\n    console.log(err.response.data)\n    return rejectWithValue(err.response.data)\n  }\n})\n\n\n//https://redux.js.org/tutorials/essentials/part-5-async-logic\n\ninterface CountriesState {\n  list: CountryModel[]\n  addCountryStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n  fetchCountriesStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n  addCountryError?: string | undefined\n  fetchCountriesError?: string | undefined\n}\n\nconst initialState: CountriesState = {\n  list: [],\n  addCountryStatus: \"idle\",\n  fetchCountriesStatus: \"idle\",\n};\n\ntype ErrorContent = {\n  Code: string\n  Messages: string[]\n}\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n//https://redux-toolkit.js.org/usage/usage-with-typescript#defining-the-initial-state-type\nexport const countriesSlice = createSlice({\n  name: 'countries',\n  initialState,\n  reducers: {\n  },\n  //https://redux-toolkit.js.org/usage/usage-guide#async-requests-with-createasyncthunk\n  //https://redux-toolkit.js.org/api/createAsyncThunk#createasyncthunk\n  //createAsyncThunk creates these three action types (pending, fulfilled, rejected) for us\n\n  //https://redux-toolkit.js.org/usage/usage-with-typescript#type-safety-with-extrareducers\n  extraReducers: builder => {\n\n    builder.addCase(fetchCountries.pending, (state, action) => {\n      state.fetchCountriesStatus = \"pending\";\n    })\n    builder.addCase(fetchCountries.fulfilled, (state, action) => {\n      state.fetchCountriesStatus = \"succeeded\";\n      state.list = action.payload.countries\n    })\n    builder.addCase(fetchCountries.rejected, (state, action) => {\n\n      state.list = [];\n      state.fetchCountriesStatus = \"failed\";\n      state.fetchCountriesError = \"Fetch countries failed\";\n    })\n\n    builder.addCase(addCountry.pending, (state, action) => {\n      state.addCountryStatus = \"pending\";\n      state.addCountryError = undefined;\n    })\n    builder.addCase(addCountry.fulfilled, (state, action) => {\n      state.list = state.list.concat(action.payload);\n\n      state.list = state.list.sort((a, b) => a.name.localeCompare(b.name));\n\n      state.addCountryStatus = \"succeeded\";\n      state.addCountryError = undefined;\n    })\n    builder.addCase(addCountry.rejected, (state, action) => {\n      state.addCountryStatus = \"failed\";\n      state.addCountryError = \"Add country failed\";\n    })\n  }\n})\n\nexport default countriesSlice.reducer\n\nexport const useTypedSelector: TypedUseSelectorHook<CountriesState> = useSelector\n","import React from \"react\"\nimport AddCountryForm from \"./AddCountryForm\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useCurrentUserState } from \"../CurrentUser/CurrentUserContext\"\nimport { addCountry } from \"../Countries/CountriesSlice\"\nimport { RootState } from \"../store\"\nimport CountryModel from \"../Countries/CountryModel\"\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\nimport AddCountryDto from \"../Countries/AddCountryFormModel\"\n\n\ntype AddCountryFormContainerProps = {\n  countries: CountryModel[]\n}\n\nconst AddCountryFormContainer = (props: AddCountryFormContainerProps) => {\n\n  const dispatch = useDispatch()\n\n  const { list, addCountryStatus, addCountryError } = useSelector((state: RootState) => state.countries)\n\n  const currentUserState: CurrentUserState = useCurrentUserState()\n\n  const token = currentUserState.user?.token || \"\"\n\n\n  const addCountryWrapper = async (country: AddCountryDto) => {\n    dispatch(addCountry({ country, token }))\n  }\n\n\n  return (\n    <AddCountryForm\n      addCountryWrapper={addCountryWrapper}\n      status={addCountryStatus}\n      error={addCountryError}\n    />\n  )\n}\n\nexport default AddCountryFormContainer\n","import React from \"react\"\nimport Country from \"./Country\"\nimport AddCountryFormContainer from \"./../AddCountryForm/AddCountryFormContainer\"\n// eslint-disable-next-line no-unused-vars\nimport CountryModel from \"./CountryModel\"\n\ntype CountriesProps = {\n  countries: CountryModel[]\n}\n\nconst renderCountries = (countries: CountryModel[]) => {\n  if (countries.length === 0) {\n    return \"Loading...\"\n  }\n\n  const result = countries.map((country: CountryModel) => (\n    <Country key={country.id} country={country} />\n  ))\n\n  return result\n}\n\nconst Countries = (props: CountriesProps) => {\n  return (\n    <div>\n      <div>There are {props.countries.length} countries</div>\n\n      <ul className=\"countries-list\">{renderCountries(props.countries)}</ul>\n\n      <p>Add country</p>\n\n      {\n        <AddCountryFormContainer\n          countries={props.countries}\n        />\n      }\n    </div>\n  )\n}\nexport default Countries\n","import React, { useEffect } from \"react\"\nimport Countries from \"./Countries\"\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\nimport { useCurrentUserState } from \"../CurrentUser/CurrentUserContext\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { fetchCountries } from \"./CountriesSlice\"\nimport { RootState } from \"../store\"\n\nconst CountriesContainer = () => {\n\n\n\n\n  const dispatch = useDispatch()\n\n  const { list, fetchCountriesStatus, fetchCountriesError } = useSelector((state: RootState) => state.countries)\n\n  const currentUserState: CurrentUserState = useCurrentUserState()\n\n  const token = currentUserState.user?.token || \"\"\n\n\n  //https://dev.to/trentyang/replace-lifecycle-with-hooks-in-react-3d4n\n  //https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\n  //https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\n\n  //useEffect's second param:\n  //when it's an empty list, the callback will only be fired once, similar to componentDidMount.\n  //when it's absent, the callback will always be fired after every render\n  //when the list contains variables, rerender will happen when those variables change\n\n  useEffect(() => {\n    const getCountries = async (token: string) => {\n      try {\n\n        dispatch(fetchCountries(token))\n\n        console.log(\"fetched countries\")\n      } catch (err) {\n        console.log(\"error: \" + err.message)\n      }\n    }\n\n    getCountries(token)\n  }, [token, dispatch])\n\n  return (\n    <React.Fragment>\n\n      {!!fetchCountriesError && <p className=\"error\">{fetchCountriesError}</p>}\n\n      { <p>Status: {fetchCountriesStatus}</p>}\n\n      <Countries countries={list || []}></Countries>\n\n    </React.Fragment>\n  )\n}\n\nexport default CountriesContainer\n","import React from \"react\"\nimport { Formik, Field, Form } from \"formik\"\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\nimport { useHistory, useLocation, } from \"react-router-dom\";\nimport LoginModel from \"./LoginModel\";\n\nconst handleSuccess = (\n  actions: any,\n  setCurrentUser: Function,\n  currentUser: CurrentUserState,\n  history: any,\n  location: any\n) => {\n\n  setCurrentUser(currentUser)\n\n  actions.setSubmitting(false)\n  actions.setStatus({})\n  actions.resetForm()\n\n  //redirect to previous page after login\n  const referrerPage = location.state || \"/\"\n\n  history.push(referrerPage)\n}\n\nconst handleFailure = (actions: any, data: any) => {\n  actions.setSubmitting(false)\n  const message = \"Login failed\"\n  actions.setStatus({ msg: message })\n  console.log(message)\n}\n\ninterface LoginFormProps {\n  loginHandler: Function\n  setCurrentUser: Function\n  initialValues: LoginModel\n  validationSchema: any\n}\n\nconst LoginForm = (props: LoginFormProps) => {\n\n  const history = useHistory()\n  const location = useLocation();\n\n  return (\n    <Formik\n      initialValues={props.initialValues}\n      validationSchema={props.validationSchema}\n      onSubmit={async (values, actions) => {\n        //for this we make the function async\n        try {\n          const currentUser = await props.loginHandler(values)\n\n          handleSuccess(\n            actions,\n            props.setCurrentUser,\n            currentUser,\n            history,\n            location\n          )\n        } catch (error) {\n          handleFailure(actions, error)\n        }\n      }}\n\n    >{({ errors, status, touched, isSubmitting }) => (\n      <Form>\n        <div>\n          Username: <Field type=\"text\" name=\"username\" className=\"username\" />\n          {errors.username && touched.username && (\n            <div>{errors.username}</div>\n          )}\n        </div>\n        <div>\n          Password: <Field type=\"text\" name=\"password\" className=\"password\" />\n          {errors.password && touched.password && (\n            <div>{errors.password}</div>\n          )}\n        </div>\n        {status && status.msg && <div>{status.msg}</div>}\n        <button type=\"submit\" disabled={isSubmitting} className=\"submit\">\n          Submit\n        </button>\n      </Form>\n    )}</Formik>\n  )\n}\n\nexport default LoginForm\n","import React from \"react\"\nimport LoginForm from \"./LoginForm\"\nimport * as yup from \"yup\" // for everything\nimport Config from \"../Config\"\nimport Axios from \"axios\"\nimport { useCurrentUserDispatch } from '../CurrentUser/CurrentUserContext'\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\nimport LoginModel from \"./LoginModel\"\n\n\nconst loginHandler = async (login: LoginModel) => {\n\n  const url = Config.settings.apiBaseUrl + \"/token\"\n\n  const data = { username: login.username, password: login.password }\n\n  const response = await Axios.post(url, data)\n\n  return response.data\n}\n\nconst initialValues: LoginModel = {\n  username: \"\",\n  password: \"\",\n}\n\nconst loginSchema = yup.object().shape({\n  username: yup\n    .string()\n    .required(\"username is required\"),\n  password: yup\n    .string()\n    .required(\"password is required\"),\n})\n\n\nconst LoginFormContainer = () => {\n\n  const dispatch = useCurrentUserDispatch()\n\n  const setCurrentUser = (currentUser: CurrentUserState) => {\n    dispatch({ type: \"SET\", payload: { isAuthenticated: true, user: currentUser } })\n  }\n\n  return (\n    <LoginForm\n      loginHandler={loginHandler}\n      setCurrentUser={setCurrentUser}\n      initialValues={initialValues}\n      validationSchema={loginSchema}\n    />\n  )\n}\n\nexport default LoginFormContainer\n","import React from \"react\"\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\"\nimport Home from \"../Home/Home\"\nimport Page2 from \"../Page2/Page2\"\nimport CountriesContainer from \"../Countries/CountriesContainer\"\nimport LoginFormContainer from \"../Login/LoginFormContainer\"\nimport { useCurrentUserState } from \"../CurrentUser/CurrentUserContext\"\nimport CurrentUserState from \"../CurrentUser/CurrentUserState\"\n\n//https://medium.com/@s4y.solutions/react-route-4-protected-route-even-simpler-9b89dc129cde\nconst ProtectedRoute\n  = ({ isAllowed, pathname, ...props }: any) => {\n\n    //https://stackoverflow.com/questions/52064303/reactjs-pass-props-with-redirect-component\n    return (\n      isAllowed\n        ? <Route {...props} />\n        : <Redirect to={{\n          pathname: \"/login\",\n          state: pathname || \"/\"\n        }} />)\n  }\n\nconst Main = () => {\n\n  const currentUserState: CurrentUserState = useCurrentUserState()\n\n  //if we try to hit a protectedt page, we're redirected to /login \n  //- passing the protected page path so we can redirect to it once logged in \n  const location = useLocation();\n\n  return (<Switch>\n    <Route path=\"/login\" component={LoginFormContainer}></Route>\n    <ProtectedRoute path=\"/countries\" component={CountriesContainer} isAllowed={currentUserState.isAuthenticated} pathname={location.pathname}></ProtectedRoute>\n    <Route exact path=\"/Page2\" component={Page2}></Route>\n    <Route exact path=\"/\" component={Home}></Route>\n  </Switch>\n  )\n}\n\nexport default Main\n","import React from \"react\"\nimport \"./App.css\"\nimport HeaderContainer from \"./Header/HeaderContainer\"\nimport Main from \"./Main/Main\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport { CurrentUserProvider } from './CurrentUser/CurrentUserContext'\n\n\nconst App = () => (\n\n  <CurrentUserProvider>\n    <Router>\n      <div className=\"App\">\n        <HeaderContainer />\n        <Main />\n      </div>\n    </Router>\n  </CurrentUserProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\nimport countriesReducer from './Countries/CountriesSlice'\nimport logger from 'redux-logger'\n\n\n// https://redux.js.org/tutorials/essentials/part-2-app-structure\n\n// https://redux-toolkit.js.org/api/getDefaultMiddleware\n\n// https://github.com/LogRocket/redux-logger\n\nconst rootReducer = combineReducers({\n  countries: countriesReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nconst store = configureStore({\n  reducer: rootReducer,\n  //thunk is part of the default middleware. logger must be last\n  //https://redux-toolkit.js.org/api/getDefaultMiddleware#middleware-callback-notation-for-configurestore\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger)\n})\n\n// TODO: devtools\n// https://github.com/reduxjs/redux-devtools/blob/master/docs/Walkthrough.md#manual-integration\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from \"./store\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}